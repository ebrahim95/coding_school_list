{
  "resolvedId": "/home/ebrahim/Desktop/coding_school_list/web_app/node_modules/solid-start/root/InlineStyles.tsx?v=fac3bc7e",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport type { PageEvent } from \"../server\";\nimport { ServerContext } from \"../server/ServerContext\";\n\ndeclare global {\n  const $ROUTE_LAYOUTS: Record<string, { layouts: any[], id: string }>\n}\n\nvar routeLayouts = $ROUTE_LAYOUTS;\n\nexport { routeLayouts };\n\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nasync function getInlineStyles(env: PageEvent[\"env\"], routerContext: RouterContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo: string[], m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev!.manifest!.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev!.manifest!.find(entry => entry.path === fullPath)!.componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(\n          ...route.layouts\n            .map((key: string) => env.__dev!.manifest!.find(entry => entry.path === key || entry.id === key))\n            .filter(entry => entry)\n            .map(entry => entry!.componentPath)\n        );\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev!.collectStyles!(match);\n  return styles;\n}\n\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n\n  const [resource] = createResource(\n    async () => {\n      if (import.meta.env.SSR) {\n        return await getInlineStyles(context!.env, context!.routerContext!);\n      } else {\n        return {};\n      }\n    },\n    {\n      deferStream: true\n    }\n  );\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return (\n    <Suspense>\n      <Show when={resource()} keyed>\n        {resource => {\n          return (\n            <Style>\n              {Object.entries(resource)\n                .filter(([k]) => style_pattern.test(k))\n                .map(([k, v]) => {\n                  return `/* ${k} */\\n` + v;\n                })\n                .join(\"\\n\") + \" \"}\n            </Style>\n          );\n        }}\n      </Show>\n    </Suspense>\n  );\n}\n",
      "start": 1685413275392,
      "end": 1685413275392
    },
    {
      "name": "solid-start-file-system-router",
      "result": "import { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport type { PageEvent } from \"../server\";\nimport { ServerContext } from \"../server/ServerContext\";\n\ndeclare global {\n  const $ROUTE_LAYOUTS: Record<string, { layouts: any[], id: string }>\n}\n\nconst routeLayouts = {\"/*404\":{\"id\":\"/*404\",\"layouts\":[]},\"/about\":{\"id\":\"/about\",\"layouts\":[]},\"/\":{\"id\":\"/\",\"layouts\":[]}};\n\nexport { routeLayouts };\n\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nasync function getInlineStyles(env: PageEvent[\"env\"], routerContext: RouterContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo: string[], m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev!.manifest!.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev!.manifest!.find(entry => entry.path === fullPath)!.componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(\n          ...route.layouts\n            .map((key: string) => env.__dev!.manifest!.find(entry => entry.path === key || entry.id === key))\n            .filter(entry => entry)\n            .map(entry => entry!.componentPath)\n        );\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev!.collectStyles!(match);\n  return styles;\n}\n\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n\n  const [resource] = createResource(\n    async () => {\n      if (import.meta.env.SSR) {\n        return await getInlineStyles(context!.env, context!.routerContext!);\n      } else {\n        return {};\n      }\n    },\n    {\n      deferStream: true\n    }\n  );\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return (\n    <Suspense>\n      <Show when={resource()} keyed>\n        {resource => {\n          return (\n            <Style>\n              {Object.entries(resource)\n                .filter(([k]) => style_pattern.test(k))\n                .map(([k, v]) => {\n                  return `/* ${k} */\\n` + v;\n                })\n                .join(\"\\n\") + \" \"}\n            </Style>\n          );\n        }}\n      </Show>\n    </Suspense>\n  );\n}\n",
      "start": 1685413275392,
      "end": 1685413275392,
      "order": "pre"
    },
    {
      "name": "solid",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst routeLayouts = {\n  \"/*404\": {\n    \"id\": \"/*404\",\n    \"layouts\": []\n  },\n  \"/about\": {\n    \"id\": \"/about\",\n    \"layouts\": []\n  },\n  \"/\": {\n    \"id\": \"/\",\n    \"layouts\": []\n  }\n};\nexport { routeLayouts };\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\nasync function getInlineStyles(env, routerContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev.manifest.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev.manifest.find(entry => entry.path === fullPath).componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...route.layouts.map(key => env.__dev.manifest.find(entry => entry.path === key || entry.id === key)).filter(entry => entry).map(entry => entry.componentPath));\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev.collectStyles(match);\n  return styles;\n}\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n  const [resource] = createResource(async () => {\n    if (import.meta.env.SSR) {\n      return await getInlineStyles(context.env, context.routerContext);\n    } else {\n      return {};\n    }\n  }, {\n    deferStream: true\n  });\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return _$createComponent(Suspense, {\n    get children() {\n      return _$createComponent(Show, {\n        get when() {\n          return resource();\n        },\n        keyed: true,\n        children: resource => {\n          return _$createComponent(Style, {\n            get children() {\n              return Object.entries(resource).filter(([k]) => style_pattern.test(k)).map(([k, v]) => {\n                return `/* ${k} */\\n` + v;\n              }).join(\"\\n\") + \" \";\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1685413275392,
      "end": 1685413275402,
      "order": "pre"
    },
    {
      "name": "vite:import-analysis",
      "result": "import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":false};import.meta.env.START_SSR = true;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"/home/ebrahim/Desktop/coding_school_list/web_app/src/entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"/home/ebrahim/Desktop/coding_school_list/web_app/src/entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"solid-start-node\";import { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=3b3fc1cb\";\nimport { Style } from \"/node_modules/@solidjs/meta/dist/index.jsx?v=fac3bc7e\";\nimport { createResource, Show, Suspense, useContext } from \"/node_modules/.vite/deps/solid-js.js?v=3b3fc1cb\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx?v=fac3bc7e\";\nconst routeLayouts = {\n  \"/*404\": {\n    \"id\": \"/*404\",\n    \"layouts\": []\n  },\n  \"/about\": {\n    \"id\": \"/about\",\n    \"layouts\": []\n  },\n  \"/\": {\n    \"id\": \"/\",\n    \"layouts\": []\n  }\n};\nexport { routeLayouts };\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\nasync function getInlineStyles(env, routerContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev.manifest.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev.manifest.find(entry => entry.path === fullPath).componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...route.layouts.map(key => env.__dev.manifest.find(entry => entry.path === key || entry.id === key)).filter(entry => entry).map(entry => entry.componentPath));\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev.collectStyles(match);\n  return styles;\n}\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n  const [resource] = createResource(async () => {\n    if (import.meta.env.SSR) {\n      return await getInlineStyles(context.env, context.routerContext);\n    } else {\n      return {};\n    }\n  }, {\n    deferStream: true\n  });\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return _$createComponent(Suspense, {\n    get children() {\n      return _$createComponent(Show, {\n        get when() {\n          return resource();\n        },\n        keyed: true,\n        children: resource => {\n          return _$createComponent(Style, {\n            get children() {\n              return Object.entries(resource).filter(([k]) => style_pattern.test(k)).map(([k, v]) => {\n                return `/* ${k} */\\n` + v;\n              }).join(\"\\n\") + \" \";\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1685413275402,
      "end": 1685413275403,
      "order": "normal"
    }
  ]
}
