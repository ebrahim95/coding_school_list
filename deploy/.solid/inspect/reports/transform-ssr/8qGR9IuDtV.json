{
  "resolvedId": "/home/ebrahim/Desktop/coding_school_list/web_app/node_modules/@tanstack/solid-table/build/lib/index.mjs",
  "transforms": [
    {
      "name": "__load__",
      "result": "/**\n * solid-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\nimport { createComponent, mergeProps, createComputed } from 'solid-js';\nimport { createStore } from 'solid-js/store';\n\n// /** @jsxImportSource solid-js */\nfunction flexRender(Comp, props) {\n  if (!Comp) return null;\n  if (typeof Comp === 'function') {\n    return createComponent(Comp, props);\n  }\n  return Comp;\n}\nfunction createSolidTable(options) {\n  const resolvedOptions = mergeProps({\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    mergeOptions: (defaultOptions, options) => {\n      return mergeProps(defaultOptions, options);\n    }\n  }, options);\n  const table = createTable(resolvedOptions);\n  const [state, setState] = createStore(table.initialState);\n  createComputed(() => {\n    table.setOptions(prev => {\n      return mergeProps(prev, options, {\n        state: mergeProps(state, options.state || {}),\n        // Similarly, we'll maintain both our internal state and any user-provided\n        // state.\n        onStateChange: updater => {\n          // merging isn't required because stores shallow update\n          setState(updater);\n          options.onStateChange == null ? void 0 : options.onStateChange(updater);\n        }\n      });\n    });\n  });\n  return table;\n}\n\nexport { createSolidTable, flexRender };\n                                  \n",
      "start": 1685413274647,
      "end": 1685413274647
    },
    {
      "name": "vite:define",
      "result": "/**\n * solid-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\nimport { createComponent, mergeProps, createComputed } from 'solid-js';\nimport { createStore } from 'solid-js/store';\n\n// /** @jsxImportSource solid-js */\nfunction flexRender(Comp, props) {\n  if (!Comp) return null;\n  if (typeof Comp === 'function') {\n    return createComponent(Comp, props);\n  }\n  return Comp;\n}\nfunction createSolidTable(options) {\n  const resolvedOptions = mergeProps({\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    mergeOptions: (defaultOptions, options) => {\n      return mergeProps(defaultOptions, options);\n    }\n  }, options);\n  const table = createTable(resolvedOptions);\n  const [state, setState] = createStore(table.initialState);\n  createComputed(() => {\n    table.setOptions(prev => {\n      return mergeProps(prev, options, {\n        state: mergeProps(state, options.state || {}),\n        // Similarly, we'll maintain both our internal state and any user-provided\n        // state.\n        onStateChange: updater => {\n          // merging isn't required because stores shallow update\n          setState(updater);\n          options.onStateChange == null ? void 0 : options.onStateChange(updater);\n        }\n      });\n    });\n  });\n  return table;\n}\n\nexport { createSolidTable, flexRender };\n                                  \n",
      "start": 1685413274647,
      "end": 1685413274647,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "/**\n * solid-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\nimport { createComponent, mergeProps, createComputed } from 'solid-js';\nimport { createStore } from 'solid-js/store';\n\n// /** @jsxImportSource solid-js */\nfunction flexRender(Comp, props) {\n  if (!Comp) return null;\n  if (typeof Comp === 'function') {\n    return createComponent(Comp, props);\n  }\n  return Comp;\n}\nfunction createSolidTable(options) {\n  const resolvedOptions = mergeProps({\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    mergeOptions: (defaultOptions, options) => {\n      return mergeProps(defaultOptions, options);\n    }\n  }, options);\n  const table = createTable(resolvedOptions);\n  const [state, setState] = createStore(table.initialState);\n  createComputed(() => {\n    table.setOptions(prev => {\n      return mergeProps(prev, options, {\n        state: mergeProps(state, options.state || {}),\n        // Similarly, we'll maintain both our internal state and any user-provided\n        // state.\n        onStateChange: updater => {\n          // merging isn't required because stores shallow update\n          setState(updater);\n          options.onStateChange == null ? void 0 : options.onStateChange(updater);\n        }\n      });\n    });\n  });\n  return table;\n}\n\nexport { createSolidTable, flexRender };\n                                  \n",
      "start": 1685413274647,
      "end": 1685413274648,
      "order": "normal"
    }
  ]
}
